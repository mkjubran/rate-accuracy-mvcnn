#!/bin/bash
clear

# Set initial default parameters
enc_cfg=encoder_Jubran.cfg	#HM encoder configuration file
QP=51	 			#value [0 - 51]
MaxCUSize=16			#Maximum CU size which plays a factor in setting the resolution of MVs
MaxPartitionDepth=1		#Maximum parition depth which plays a factor in setting the resolution of the MVs
SearchRange=16			#value [16,32,64]
mbmapXxX=4			#value [8,16]
SetType="train"			#value [0:Train Set,1: Test Set]
TTSet=01			#UCF-101 Split Set [01 02 03]
IndexFirstVideo=0		#Index of first video to be encoded [1,2, .... ]
NumVideos=100			#Number of Video files to be encoded
StrComment="_A"			#Comment to be added at the end of the directory that will be made (if doesn't exist) to contain the output MVs
Overwrite=1			#Overwrite any exisitng MV files in the directory
PathWay="../HMMV/HM_Sample"


## Parsing Command Line Parameters
## cmd exmaple: ./Generate-Split-1 -ecfg=encoder.cfg -qp=25 -sr=16 -res=4 -settype=test sset=01 -ifvid=1 -nvid=5 -strcom=Opt1a
for i in "$@"
do
case $i in
    -ecfg=*|--ecfg=*)
    enc_cfg="${i#*=}"
    shift
    ;;
    -qp=*|--qp=*)
    QP="${i#*=}"
    QP="${i#*=}"
    shift
    ;;
    -mcu=*|--mcu=*)
    MaxCUSize="${i#*=}"
    MaxCUSize="${i#*=}"
    shift
    ;;
    -mpd=*|--mpd=*)
    MaxPartitionDepth="${i#*=}"
    MaxPartitionDepth="${i#*=}"
    shift
    ;;
    -sr=*|--sr=*)
    SearchRange="${i#*=}"
    shift
    ;;
    -res=*|--res=*)
    mbmapXxX="${i#*=}"
    shift
    ;;
    -settype=*|--settype=*)
    SetType="${i#*=}"
    shift
    ;;
   -sset=*|--sset=*)
    TTSet="${i#*=}"
    shift
    ;;
    -ifvid=*|--ifvid=*)
    IndexFirstVideo="${i#*=}"
    shift
    ;;
    -nvid=*|--nvid=*)
    NumVideos="${i#*=}"
    shift
    ;;
   -ow=*|--ow=*)
    Overwrite="${i#*=}"
    shift
    ;;
   -strcom=*|--strcom=*)
    StrComment="_${i#*=}"
    shift
    ;;
    *)
          # unknown option
    ;;
esac
done
#### End Parsing Command Line Parameters

# Hardcoded Parameters
NumFrame=300000
IndexLastVideo=$((IndexFirstVideo + NumVideos - 1))
#%%%%%%%%%% Read file list and identify the location of the video and the MV output file name
if [ $SetType = "train" ] || [ $SetType = "Train" ];
then
SetType="train"
InputFileList="./UCF_trainlist"$TTSet".txt"
else if [ $SetType = "test" ] || [ $SetType = "Test" ];
then
SetType="test"
InputFileList="./UCF_testlist"$TTSet".txt"
else
echo "$SetType is not recognized as set type. It must be train or test"
exit 1
fi
fi

IFS=$'\n' read -d '' -r -a Lines < $InputFileList  #Read the list of test/training video files

if [ $IndexLastVideo -gt ${#Lines[@]} ]
then
IndexLastVideo=${#Lines[@]}
fi
TotalVideos=$((IndexLastVideo-IndexFirstVideo+1))


if ! [ -d $PathWay ]
then
mkdir $PathWay/
fi


if [ $SetType = "train" ]
then
 
 if ! [ -d $PathWay/HMStats_NoTexture_Train$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/HMStats_NoTexture_Train$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

 if ! [ -d $PathWay/HMStats_OrigHM_Train$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/HMStats_OrigHM_Train$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

StatsFile=$PathWay/HMStats_Orig_NoTexure_Train$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment.dat

else

 if ! [ -d $PathWay/HMStats_NoTexture_Test$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/HMStats_NoTexture_Test$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment 
 fi

 if ! [ -d $PathWay/HMStats_OrigHM_Test$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir $PathWay/HMStats_OrigHM_Test$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

StatsFile=$PathWay/HMStats_Orig_NoTexure_Test$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment.dat
fi

if [[ ($Overwrite == "1") ]]
then
rm -rf $StatsFile;
fi


#%%%%%%%%%% Hidder General Info
echo %########################################################################################
echo "HM config file=${enc_cfg}, QP=$QP, Max CU Size=$MaxCUSize, Max Partition Depth=$MaxPartitionDepth, Search Range=$SearchRange, MV Resolution=$mbmapXxX"
echo "UCF-101 Split Set = $TTSet, Set type (train/test)=$SetType, Index of First Video = $IndexFirstVideo, Number of Videos = $TotalVideos"  
echo %########################################################################################

cnt1=$IndexFirstVideo;
cnt2=1; #increment 
while [ $cnt1 -le $IndexLastVideo ]
do
Line=${Lines[$cnt1]}

Directory="${Line%/*}"
FileName="${Line##*/}"
FileNameP1="${FileName%.*}"
FileNameP2="avi"
AbsFileName=$Directory"/"$FileNameP1.$FileNameP2

#%%%%%%%%%% Show Processing Progress to keep track
PerCompleted1=$((100*(cnt1-IndexFirstVideo+1)/(IndexLastVideo-IndexFirstVideo+1)))
PerCompleted2=$((100*(cnt1-IndexFirstVideo+1)%(IndexLastVideo-IndexFirstVideo+1)))
echo "($StrComment, $SetType) processing video file number $cnt1  [$IndexFirstVideo - $IndexLastVideo] ($AbsFileName) ... $PerCompleted1.$PerCompleted2% completed .. $(date +"%d-%m-%y %T")"

#%%%%%%%%%%%%%%%%%%%%%%%%%% Identify file names to read for rate

#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately"

if ! [ -d $PathWay ]
then
mkdir $PathWay/
fi


if [ $SetType = "train" ]
then
HMStatsNoTextureFileName=$PathWay/HMStats_NoTexture_Train$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/HMStats_$FileNameP1.dat
HMStatsOrigFileName=$PathWay/HMStats_OrigHM_Train$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/HMStats_$FileNameP1.dat
else
HMStatsNoTextureFileName=$PathWay/HMStats_NoTexture_Test$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/HMStats_$FileNameP1.dat
HMStatsOrigFileName=$PathWay/HMStats_OrigHM_Test$TTSet"_QP"$QP"_MCU"$MaxCUSize"_MDepth"$MaxPartitionDepth"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/HMStats_$FileNameP1.dat
fi

#%% check if the Stats files exist and not of zero size
if [[ (! -s $HMStatsNoTextureFileName) || (! -s $HMStatsOrigFileName) || (! -e $HMStatsNoTextureFileName) || (! -e $HMStatsOrigFileName) ]]
then
#echo "one or more of the following files doesn't exit or of zero size: $HMStatsNoTextureFileName, $HMStatsOrigFileName"

echo "....... Stats file is missing for video $cnt1"
echo 

else


## Parsing the Number of frames, size of bitstream, and size of motion info from the $JMFrameStatsOrigFileName
TotalSize_Orig=0;
MVD_Orig=0;
MVD_EP_Orig=0;
NumFrames_Orig=0;
ReadNumFrames_Orig=0;
while IFS=$'\t' read -r JMSLine
do
#  printf 'f1: %s\n' "$JMSLine"
  IFS=' ' read -r -a JMSLine_array1 <<< "$JMSLine"
  if [[ "${JMSLine_array1[0]}" == "[TOTAL" ]]
  then
    TotalSize_Orig=$(echo ${JMSLine_array1[10]} | tr -d ' ')
  fi
  
  if [[ "${JMSLine_array1[0]}" == "CABAC_BITS__MVD" ]]
  then
    MVD_Orig=$(echo ${JMSLine_array1[10]} | tr -d ' ')
  fi

  if [[ "${JMSLine_array1[0]}" == "CABAC_BITS__MVD_EP" ]]
  then
    MVD_EP_Orig=$(echo ${JMSLine_array1[10]} | tr -d ' ')
  fi

  if [[ $ReadNumFrames_Orig == "1" ]]
  then
    NumFrames_Orig=$(echo ${JMSLine_array1[0]} | tr -d ' ')
    ReadNumFrames_Orig=2;
  fi

  if [[ ("${JMSLine_array1[0]}" == "Total") && ("${JMSLine_array1[1]}" == "Frames") && ($ReadNumFrames_Orig == "0") ]]
  then
    ReadNumFrames_Orig=1;
  fi
done < <(paste $HMStatsOrigFileName)

#echo $TotalSize_Orig $MVD_Orig $MVD_EP_Orig


## Parsing the Number of frames, size of bitstream, and size of motion info from the $JMFrameStatsNoTectureFileName
TotalSize_NoTexture=0;
MVD_NoTexture=0;
MVD_EP_NoTexture=0;
NumFrames_NoTexture=0;
ReadNumFrames_NoTexture=0;
while IFS=$'\t' read -r JMSLine
do
#  printf 'f1: %s\n' "$JMSLine"
  IFS=' ' read -r -a JMSLine_array1 <<< "$JMSLine"
  if [[ "${JMSLine_array1[0]}" == "[TOTAL" ]]
  then
    TotalSize_NoTexture=$(echo ${JMSLine_array1[10]} | tr -d ' ')
  fi

  if [[ "${JMSLine_array1[0]}" == "CABAC_BITS__MVD" ]]
  then
    MVD_NoTexture=$(echo ${JMSLine_array1[10]} | tr -d ' ')
  fi

  if [[ "${JMSLine_array1[0]}" == "CABAC_BITS__MVD_EP" ]]
  then
    MVD_EP_NoTexture=$(echo ${JMSLine_array1[10]} | tr -d ' ')
  fi

if [[ $ReadNumFrames_NoTexture == "1" ]]
  then
    NumFrames_NoTexture=$(echo ${JMSLine_array1[0]} | tr -d ' ')
    ReadNumFrames_NoTexture=2;
  fi

  if [[ ("${JMSLine_array1[0]}" == "Total") && ("${JMSLine_array1[1]}" == "Frames") && ($ReadNumFrames_NoTexture == "0") ]]
  then
    ReadNumFrames_NoTexture=1;
  fi

done < <(paste $HMStatsNoTextureFileName)

#echo $TotalSize_NoTexture $MVD_NoTexture $MVD_EP_NoTexture

#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately"

echo $cnt1 $NumFrames_Orig $TotalSize_Orig $MVD_Orig $MVD_EP_Orig $NumFrames_NoTexture $TotalSize_NoTexture $MVD_NoTexture $MVD_EP_NoTexture $AbsFileName >> $StatsFile 
fi

cnt1=$((cnt1 + cnt2))
done < "$InputFileList"   #until end of FileNameList or NumVideos


#(($SetType = "train") && (! -e "../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin"))
